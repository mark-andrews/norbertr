library(norbertr)
library(norbertr)
random_walk(0.5, 2, 1)
library(norbertr)
simulate_ddm(10, 0.5, 2, 1)
sims_df <- simulate_ddm(10000, 0.5, 2, 1)
nrow(sims_df)
sims_df
library(tidyverse)
group_by(sims_df)
group_by(sims_df, choice)
group_by(sims_df, choice) %>% summarise(n = n())
library(norbertr)
library(norbertr)
simulate_ddm(10, 0.5, 2, 1)
simulate_ddm(10, 0.5, 2, 1) %>% group_by(choice)
simulate_ddm(10, 0.5, 2, 1) %>% group_by(choice) %>% summarise(n = n())
simulate_ddm(10000, 0.5, 2, 1) %>% group_by(choice) %>% summarise(n = n())
dchoice(0.5, 1, 1)
devtools::load_all(".")
simulate_ddm(10000, 0.5, 2, 1) %>% group_by(choice) %>% summarise(n = n())
simulate_ddm(10000, 0.5, 2, 1) %>% group_by(choice) %>% summarise(n = n())
simulate_ddm(10000, 0.5, 2, 1) %>% group_by(choice) %>% summarise(n = n())
dchoice(0.5, 2, 1)
simulate_ddm(10000, 0.5, 2, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time))
simulate_ddm(10000, 0.5, 2, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time)) %>%
head(50)
simulate_ddm(10000, 0.5, 1, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time))
simulate_ddm(10000, 0.5, 1, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time)) %>%
ggplot(aes(x = time, colour = choice)) + geom_histogram(bins = 50)
simulate_ddm(10000, 0.5, 1, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time)) %>%
ggplot(aes(x = time, fill = choice)) + geom_histogram(bins = 50, position = 'identity')
simulate_ddm(100000, 0.5, 1, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time)) %>%
ggplot(aes(x = time, fill = choice)) +
geom_histogram(bins = 100, position = 'identity')
simulate_ddm(100000, 0.5, 2, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time)) %>%
ggplot(aes(x = time, fill = choice)) +
geom_histogram(bins = 100, position = 'identity')
simulate_ddm(100000, 0.5, 5, 1) %>%
mutate(time = if_else(choice == 'upper', time, -time)) %>%
ggplot(aes(x = time, fill = choice)) +
geom_histogram(bins = 100, position = 'identity')
simulate_ddm(10000, 0.5, 5, 1)
simulate_ddm(10000, 0.5, 5, 1) %>% group_by(choice)
simulate_ddm(10000, 0.5, 5, 1) %>% group_by(choice) %>% summarise(min(time), max(time), mean(time), median(time))
simulate_ddm(10000, 0.5, 5, 1) %>% group_by(choice) %>% summarise(min(time), max(time), mean(time), median(time), quantile(time, probs = 0.9))
pi
devtools::load_all(".")
standard_dfpt(1, 0.5)
devtools::load_all(".")
standard_dfpt(1, 0.5)
standard_dfpt(1, 0.5)
devtools::load_all(".")
dfpt(1, 0.5, 2, 1)
dfpt(seq(0, 5, by = 0.01), 0.5, 2, 1)
map_dbl(seq(0, 5, by = 0.01), ~dfpt(., 0.5, 1, 1))
map_dbl(seq(0.01, 5, by = 0.01), ~dfpt(., 0.5, 1, 1))
map_dbl(seq(0.01, 5, by = 0.01), ~dfpt(., 0.5, 1, 1)) %>% plot()
map_dbl(seq(0.01, 1, by = 0.01), ~dfpt(., 0.5, 1, 1)) %>% plot()
map_dbl(seq(0.01, 0.1, by = 0.01), ~dfpt(., 0.5, 1, 1))
map_dbl(seq(0.01, 0.2, by = 0.01), ~dfpt(., 0.5, 1, 1))
devtools::load_all(".")
map_dbl(seq(0.01, 0.2, by = 0.01), ~dfpt(., 0.5, 1, 1))
map_dbl(seq(0.01, 1, by = 0.01), ~dfpt(., 0.5, 1, 1)) %>% plot()
s <- map_dbl(seq(0.01, 1, by = 0.01), ~dfpt(., 0.5, 1, 1))
x <- seq(0.01, 1, by = 0.01)
s <- map_dbl(x, ~dfpt(., 0.5, 1, 1))
diff(x)
s
s * 0.01
sum(s) * 0.01
s <- map_dbl(x, ~dfpt(., 0.5, 1, 1))
dchoice(0.5, 1, 1)
1 - dchoice(0.5, 1, 1)
s <- map_dbl(x, ~dfpt(., 0.5, 2, 1))
sum(s) * 0.01
1 - dchoice(0.5, 2, 1)
map_dbl(seq(0.01, 1, by = 0.01), ~dfpt(., 0.5, 2, 1)) %>% plot()
map_dbl(seq(0.01, 5, by = 0.01), ~dfpt(., 0.5, 2, 1)) %>% plot()
map_dbl(seq(0.01, 5, by = 0.01), ~dfpt(., 0.5, 2, 1)) -> s
sum(s)
sum(s) * 0.01
devtools::load_all(".")
x <- seq(0.01, 5, by = 0.01)
map_dbl(x, ~dfpt(., 0.5, 2, 1)) -> s
sum(s)
sum(s) * 0.01
dchoice(0.5, 2, 1)
a <- 2
(a ^ 2)^(3/2)
devtools::load_all(".")
?dfpt
?dfpt
?dfpt
x <- 0
stopifnot(x %in% c(0, 1))
x <- 1
stopifnot(x %in% c(0, 1))
x <- 1.1
stopifnot(x %in% c(0, 1))
library(norbertr)
?time_choice_density
devtools::load_all(".")
usethis::use_vignette('demo', title = 'Some Tools for Understanding Drift Diffusion Models')
usethis::use_package('ggplot2', min_version = TRUE)
usethis::use_pipe()
usethis::use_tibble()
library(norbertr)
usethis::use_readme_rmd()
library(norbertr)
usethis::use_pkgdown()
pkgdown::build_site()
install.packages("rstanarm")
install.packages("rstantools")
install.packages("rstantools")
#rstantools::use_rstan()
getwd()
rstantools::use_rstan()
?rstantools::use_rstan
devtools::load_all(".")
stanmodels$ddm
library(norbertr)
?ddm_stan
devtools::load_all(".")
?ddm_stan
sims_df <- simulate_ddm(100, b = 0.75, a = 2, v = 0.5) %>%
mutate(time = time + tau)
sims_df <- simulate_ddm(100, b = 0.75, a = 2, v = 0.5) %>% mutate(time = time + 0.1)
library(tidyverse)
sims_df <- simulate_ddm(100, b = 0.75, a = 2, v = 0.5) %>% mutate(time = time + 0.1)
sims_df
m=ddm_stan(time + choice ~ 1, data = sims_df)
devtools::load_all(".")
sims_df
m=ddm_stan(time + choice ~ 1, data = sims_df)
devtools::load_all(".")
m=ddm_stan(time + choice ~ 1, data = sims_df)
m=ddm_stan(time + choice ~ 1, data = sims_df, cores = 4)
m
sims_df <- simulate_ddm(100, b = 0.75, a = 2, v = 0.5) %>% mutate(time = time + 0.1)
m <- ddm_stan(time + choice ~ 1, data = sims_df, cores = 4)
m
sims_df <- simulate_ddm(1000, b = 0.75, a = 2, v = 0.5) %>% mutate(time = time + 0.1)
m <- ddm_stan(time + choice ~ 1, data = sims_df, cores = 4)
m
library(norbertr)
usethis::use_vignette('stan_demo', 'Bayesian inference of a drift diffusion model')
library(norbertr)
system.file("stan", "ddm.stan", package = 'norbertr')
file.show(system.file("stan", "ddm.stan", package = 'norbertr'))
?file.show
?cat
cat(readLines(system.file("stan", "ddm.stan", package = 'norbertr')), sep='\n')
norbertr::ddm_stan()
pkgbuild::build_si
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
?devtools::install_github()
?devtools::install_github()
pkgdown::build_site()
pkgdown::build_site()
